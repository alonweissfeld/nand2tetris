// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    // Defines an array that holds 16 values of powers of 2.
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        // Construct twoToThe array values.
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        // let twoToThe[15] = 32768;
        return;
    }

    /** Returns the value of 2 to the given power */
    function int twoToThePower(int p) {
        return twoToThe[p];
    }

    /** Returns true if the i-th bit of x is 1, false otherwise */
    function boolean bit(int x, int i) {
        return ~((x & twoToThe[i]) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0) {
            return x;
        }
        return -x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, sum, shiftedX;

        let i = 0;
        let sum = 0;
        let shiftedX = x;

        // Each number is a 16bit integer.
        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }

            // Double shiftedX and advance i
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum; // We're done.
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var int result;
        var boolean negate;

        let negate = ((x < 0) & (y > 0) | (x < 0) & (y > 0));
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }

        let q = Math.divide(x, y + y);
        if (x - (Math.multiply(q + q, y)) < y) {
            let result = q + q;
        } else {
            let result = q + q + 1;
        }

        if (negate) {
            return -result;
        } else {
            return result;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i, result, squared, temp;

        // Defensive - square root of a negative number is undefined.
        if (x < 0) {
            return -1;
        }

        let result = 0;
        let i = 7; // Since it's 16 bit integer, 15 / 2 = 7

        // Compute the square root using binary search.
        while (~(i < 0)) {
            let temp = result + twoToThe[i];
            let squared = Math.multiply(temp, temp);

            if (~(squared > x) & (squared > 0)) {
                let result = temp;
            }
            let i = i - 1;
        }
        return result;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
