class DirectionGame {
    // Determines the square and it's direction for this game.
    // 0=none, 1=up, 2=right, 3=down, 4=left
    field Square square;

    // Determines the user collected score.
    field int score;

    // Determines the levels array. Each level represents the current
    // round in the game, and is structured from the direction in which
    // the square moves, a delay that determines the speed of
    // it's movement and the text shown - which is the actual answer.
    field Array levels;

    // Determines the current level being played.
    field Level currentLevel;
    field int currentLevelIdx;

    /** Initializes a new Direction Game. */
    constructor DirectionGame new() {
        // Creates a 40x40 square and position it in the
        // bottom-center of the screen.
        let square = Square.new(216, 186, 40, this);

        // Set up the levels/rounds of the game.
        do setUpLevels();

        return this;
    }

    /** Set up the levels of the game, and initialize the first level. */
    method void setUpLevels() {
        let currentLevelIdx = 0;
        let levels = Array.new(10);

        // Remainder: 0=none, 1=up, 2=right, 3=down, 4=left
        // Level constructor receives the direction of the square,
        // time delay that determines how fast the square is moving
        // and a text string which is the actual answer.
        let levels[0] = Level.new(1, 5, "DOWN");
        let levels[1] = Level.new(2, 5, "LEFT");
        let levels[2] = Level.new(4, 10, "RIGHT");
        let levels[3] = Level.new(3, 5, "UP");
        let levels[4] = Level.new(2, 5, "DOWN");
        let levels[5] = Level.new(1, 5, "RIGHT");

        let currentLevel = levels[0];
        return;
    }

    /** Disposes this game. */
    method void dispose() {
        do square.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Invokes graphical interfaces. */
    method void startGraphics() {
        // Run the square in the current direction
        do moveSquare(currentLevel.getDirection());

        // Display text.
        // do Text.display(currentLevel.getText());

        // Delays the next movement
        do Sys.wait(5);
        return;
    }

    /** Listener for when a square reaches the screen edge. */
    method void reachedEdge() {
        do advanceLevel();
        return;
    }

    /** Advances the game to to the next level/round. */
    method void advanceLevel() {
        let currentLevelIdx = currentLevelIdx + 1;
        let currentLevel = levels[currentLevelIdx];

        // Reposition the square
        do Screen.clearScreen();
        do repositionSquare(currentLevel.getDirection());
        return;
    }

    /** Moves the square in the given direction, */
    method void moveSquare(int dir) {
        if (dir = 1) { do square.moveUp(); }
        if (dir = 2) { do square.moveRight(); }
        if (dir = 3) { do square.moveDown(); }
        if (dir = 4) { do square.moveLeft(); }
        return;
    }

    /** Checks the user input against the current text displayed. */
    method void checkUserInput(String txt, char key) {
        if ((key = 131) & (txt = "UP")) { let score = score + 1; } // up
        if ((key = 132) & (txt = "RIGHT")) { let score = score + 1; } // right
        if ((key = 133) & (txt = "DOWN")) { let score = score + 1; } // down
        if ((key = 130) & (txt = "LEFT")) { let score = score + 1; } // left
        return;
    }

    /**
     * Reposition the square for the next round, according
     * to the given direction.
     */
    method void repositionSquare(int dir) {
        // Remainder: 0=none, 1=up, 2=right, 3=down, 4=left
        if (dir = 1) { let square = Square.new(216, 186, 40, this); }
        if (dir = 2) { let square = Square.new(216, 90, 40, this); }
        if (dir = 3) { let square = Square.new(216, 60, 40, this); }
        if (dir = 4) { let square = Square.new(216, 90, 40, this); }
        return;
    }

    /** Run game. */
    method void run() {
        var char key;
        var boolean exit;

        let exit = false;
        while (~exit) {
            // Waits for a key to be pressed.
            while (key = 0) {
                // keyPressed returns the character of the currently pressed
                // key on the keyboard. If no key is currently
                // pressed, returns 0
                let key = Keyboard.keyPressed();

                // Invoke any graphical interfaces.
                do startGraphics();
            }

            if (key = 81)  { let exit = true; }     // q key

            // Check the user input. If the key which is pressed equals
            // to the text of the current round, increase the score.
            do checkUserInput(currentLevel.getText(), key);

            // Since the user have choose it's answer, advance to next round.
            do advanceLevel();

            // Waits for a key to be released.
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do startGraphics();
            }
        }

        return;
    }
}
